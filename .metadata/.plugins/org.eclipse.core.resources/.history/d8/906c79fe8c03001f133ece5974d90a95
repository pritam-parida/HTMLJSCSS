
public class DEQueueDS {

	static int[] dq;
	static int front = -1, rear = -1, size;
	public static void main(String[] args) {
		
	}
	
	static void create(int n)
	{
		dq = new int[n];
		size = n;
	}
	static void insertFront(int ele)
	{
		if(isFull())
		{
			
		}
		else
		{
			if()
			{
				
			}
			else if()
			{
				
			}
			else
			{
				
			}
			dq[front] = ele;
			System.out.println("Element inserted");		}
	}
	static void deleteFront()
	{
		if(isEmpty())
		{
			System.out.println("Queue is Underflow")
		}
		else
		{
			System.out.println("Deleted : " + dq[front]);
			if()
			{
				
			}
			else if()
			{
				
			}
			else
			{
				
			}
		}
	}
	static void insertRear(int ele)
	{
		if(isFull())
		{
			
		}
		else
		{
			System.out.println("Deleted : " + dq[rear]);
			if()
			{
				
			}
			else if()
			{
				
			}
			else
			{
				
			}
			dq[rear] = ele;
			System.outprintln("Element inserted");
	}
	static void deleteRear()
	{
		if(isEmpty())
		{
			System.out.println("Queue is Underflow")
		}
		else
		{
			if()
			{
				
			}
			else if()
			{
				
			}
			else
			{
				
			}
		}
	}
	static boolean isFull()
	{
		if((front == 0 && rear == size - 1) || (front == rear + 1))
			return true;
		else
			return false;
	}
	static boolean isEmpty()
	{
		if(rear == -1)
			return true;
		else
			return false;
	}
	static void traverse()
	{
		
	}
	
}
